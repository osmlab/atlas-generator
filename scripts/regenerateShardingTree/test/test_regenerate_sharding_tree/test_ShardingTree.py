import os
from tempfile import NamedTemporaryFile
from typing import Iterable
from unittest import TestCase, main
from unittest.mock import MagicMock

from regenerate_sharding_tree import ShardingTree, Tile


class TestShardingTree(TestCase):
    """
    Test class for ShardingTree
    """

    def test_read_lines(self):
        """Check that we can use any string iterable"""
        self.check_sharding_tree(ShardingTree(self.get_test_lines()))

    def test_read_file(self):
        """Check that we can read directly from a file"""
        temporary_file = NamedTemporaryFile(delete=False)
        with open(temporary_file.name, "w") as temp_file:
            temp_file.writelines(
                [line + os.linesep for line in self.get_test_lines()]
            )
        try:
            self.check_sharding_tree(ShardingTree(temporary_file.name))
        finally:
            os.remove(temporary_file.name)

    def test_read_tiles(self):
        """Ensure that use tiles in creation works"""
        original_sharding_tree = ShardingTree(self.get_test_lines())
        self.check_sharding_tree(ShardingTree(original_sharding_tree.tiles))

    def test_to_iterable_str(self):
        """Ensure that converting to an str iterable works"""
        sharding_tree = ShardingTree(self.get_test_lines())
        # Sanity check -- if this fails, then something else is wrong
        self.check_sharding_tree(sharding_tree)
        self.assertListEqual(
            list(self.get_test_lines()), list(sharding_tree.to_iterable_str())
        )

    def test_update_sharding_tree(self):
        """Check that we can update the sharding tree"""
        os.path.isdir = MagicMock(return_value=True)
        os.scandir = MagicMock(
            side_effect=lambda k: [os.path.basename(k) + ".atlas"]
        )
        os.path.getsize = MagicMock(return_value=10)

        sharding_tree = ShardingTree(self.get_test_lines())
        # Sanity check
        self.check_sharding_tree(sharding_tree)

        new_sharding_tree = sharding_tree.update_sharding_tree("/tmp/")
        self.assertListEqual(
            list(sharding_tree.tiles),
            list(new_sharding_tree.tiles),
            "The sharding tree shouldn't have changed",
        )

        os.path.getsize = MagicMock(return_value=10 << 20)
        new_sharding_tree = sharding_tree.update_sharding_tree("/tmp/")
        self.assertEqual(
            21, len(new_sharding_tree.tiles), "All shards were too large"
        )

        # Check with files in single directory
        os.path.isdir.return_value = False
        return_files = [
            file + ".atlas"
            for file in self.get_test_lines()
            if not file.endswith("+")
        ]
        return_files.insert(0, "0-0-0.bak")
        os.scandir.side_effect = lambda _: return_files
        new_sharding_tree = sharding_tree.update_sharding_tree("/tmp/")
        self.assertEqual(
            21, len(new_sharding_tree.tiles), "All shards were too large"
        )

    def check_sharding_tree(self, sharding_tree: ShardingTree):
        """Check the sharding tree generated by get_test_lines"""
        self.assertEqual(5, len(sharding_tree.tiles))
        self.assertEqual(Tile(0, 0, 0, final=False), sharding_tree.tiles[0])
        self.assertEqual(Tile(1, 0, 0, final=True), sharding_tree.tiles[1])
        self.assertEqual(Tile(1, 0, 1), sharding_tree.tiles[2])
        self.assertEqual(Tile(1, 1, 0), sharding_tree.tiles[3])
        self.assertEqual(Tile(1, 1, 1), sharding_tree.tiles[4])

    @staticmethod
    def get_test_lines() -> Iterable[str]:
        """Test shards"""
        return ["0-0-0+", "1-0-0", "1-0-1", "1-1-0", "1-1-1"]


if __name__ == "__main__":
    main()
