plugins {
	id 'java'
	id 'maven'
	id 'idea'
	id 'signing'
	id 'checkstyle'
	id 'jacoco'
	id "com.diffplug.gradle.spotless" version "3.4.0"
	id 'org.sonarqube' version '2.6'
	id "io.codearte.nexus-staging" version "0.8.0"
}

apply from: 'dependencies.gradle'
apply from: 'gradle/quality.gradle'
apply from: 'gradle/deployment.gradle'
apply from: 'gradle/execution.gradle'

description = "Atlas Generator Library"

sourceCompatibility=1.8
targetCompatibility=1.8

repositories
{
    // For geotools
    maven { url "http://download.osgeo.org/webdav/geotools/" }
    mavenCentral()
    // For Spark CDH
    maven { url "https://repository.cloudera.com/content/repositories/releases/" }
    // For jetty (through spark)
    maven { url "http://repository.cloudera.com/cloudera/cloudera-repos/" }
}


configurations
{
    all
    {
        resolutionStrategy
        {
            force packages.atlas
            force packages.spark.core
            // http://stackoverflow.com/questions/31039367/spark-parallelize-could-not-find-creator-property-with-name-id
            // This is to avoid a JsonMappingException for something named 'id'
            // in org.apache.spark.rdd.RDDOperationScope
            force 'com.fasterxml.jackson.core:jackson-databind:2.4.4'
            // Snappy 1.1.1.6 is the one that has the proper .so libs.
            // https://github.com/xerial/snappy-java/issues/6
            force packages.snappy
        }
    }
    shaded
    {
        // Hadoop and Spark are way too fat.
        exclude group: 'org.apache.hadoop'
        exclude group: 'org.apache.spark'
    }
}

dependencies
{
    compile packages.atlas
    compile packages.spark.core

    shaded project.configurations.getByName('compile')
}

task shaded(type: Jar){
    baseName = project.name
    classifier = 'shaded'
    from
    {
        configurations.shaded.collect
        {
            it.isDirectory() ? it : zipTree(it).matching{
                exclude
                {
                    it.path.contains('META-INF') && (it.path.endsWith('.SF') || it.path.endsWith('.DSA') || it.path.endsWith('.RSA'))
                }
            }
        }
    }
    with jar
    zip64 = true
}

task fat(type: Jar){
    baseName = project.name
    classifier = 'fat'
    from
    {
        configurations.compile.collect
        {
            it.isDirectory() ? it : zipTree(it).matching{
                exclude
                {
                    it.path.contains('META-INF') && (it.path.endsWith('.SF') || it.path.endsWith('.DSA') || it.path.endsWith('.RSA'))
                }
            }
        }
    }
    with jar
    zip64 = true
}

/**
 * Artifact related items
 */
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts
{
    archives javadocJar, sourcesJar
}

/*
 * This is to skip the tasks for which there is a skip<TaskName>=true
 * environment variable
 */
def skippedTaskNames = System.getenv().findAll { key, value ->
    key.startsWith("skip") && value.equalsIgnoreCase("true")
}.keySet().collect { it.substring(4) }
gradle.startParameter.excludedTaskNames += skippedTaskNames

idea {
    project {
        languageLevel = '1.8'
    }
}
